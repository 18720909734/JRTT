// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.injector.components;

import com.dl7.mvp.injector.modules.PhotoNewsModule;
import com.dl7.mvp.injector.modules.PhotoNewsModule_ProvideAdapterFactory;
import com.dl7.mvp.injector.modules.PhotoNewsModule_ProvidePresenterFactory;
import com.dl7.mvp.module.base.IBasePresenter;
import com.dl7.mvp.module.photo.news.PhotoNewsFragment;
import com.dl7.mvp.module.photo.news.PhotoNewsFragment_MembersInjector;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerPhotoNewsComponent implements PhotoNewsComponent {
  private Provider<IBasePresenter> providePresenterProvider;

  private Provider<BaseQuickAdapter> provideAdapterProvider;

  private MembersInjector<PhotoNewsFragment> photoNewsFragmentMembersInjector;

  private DaggerPhotoNewsComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.providePresenterProvider =
        DoubleCheck.provider(
            PhotoNewsModule_ProvidePresenterFactory.create(builder.photoNewsModule));

    this.provideAdapterProvider =
        DoubleCheck.provider(PhotoNewsModule_ProvideAdapterFactory.create(builder.photoNewsModule));

    this.photoNewsFragmentMembersInjector =
        PhotoNewsFragment_MembersInjector.create(providePresenterProvider, provideAdapterProvider);
  }

  @Override
  public void inject(PhotoNewsFragment fragment) {
    photoNewsFragmentMembersInjector.injectMembers(fragment);
  }

  public static final class Builder {
    private PhotoNewsModule photoNewsModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public PhotoNewsComponent build() {
      if (photoNewsModule == null) {
        throw new IllegalStateException(PhotoNewsModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerPhotoNewsComponent(this);
    }

    public Builder photoNewsModule(PhotoNewsModule photoNewsModule) {
      this.photoNewsModule = Preconditions.checkNotNull(photoNewsModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
