// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.module.news.special;

import com.dl7.mvp.module.base.IBasePresenter;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class SpecialActivity_MembersInjector implements MembersInjector<SpecialActivity> {
  private final Provider<IBasePresenter> mPresenterProvider;

  private final Provider<BaseQuickAdapter> mSpecialAdapterProvider;

  public SpecialActivity_MembersInjector(
      Provider<IBasePresenter> mPresenterProvider,
      Provider<BaseQuickAdapter> mSpecialAdapterProvider) {
    assert mPresenterProvider != null;
    this.mPresenterProvider = mPresenterProvider;
    assert mSpecialAdapterProvider != null;
    this.mSpecialAdapterProvider = mSpecialAdapterProvider;
  }

  public static MembersInjector<SpecialActivity> create(
      Provider<IBasePresenter> mPresenterProvider,
      Provider<BaseQuickAdapter> mSpecialAdapterProvider) {
    return new SpecialActivity_MembersInjector(mPresenterProvider, mSpecialAdapterProvider);
  }

  @Override
  public void injectMembers(SpecialActivity instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    com.dl7.mvp.module.base.BaseActivity_MembersInjector.injectMPresenter(
        instance, mPresenterProvider);
    instance.mSpecialAdapter = mSpecialAdapterProvider.get();
  }

  public static void injectMSpecialAdapter(
      SpecialActivity instance, Provider<BaseQuickAdapter> mSpecialAdapterProvider) {
    instance.mSpecialAdapter = mSpecialAdapterProvider.get();
  }
}
