// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.injector.components;

import com.dl7.mvp.injector.modules.ChannelModule;
import com.dl7.mvp.injector.modules.ChannelModule_ProvideManageAdapterFactory;
import com.dl7.mvp.injector.modules.ChannelModule_ProvideManagePresenterFactory;
import com.dl7.mvp.local.table.DaoSession;
import com.dl7.mvp.module.news.channel.ChannelActivity;
import com.dl7.mvp.module.news.channel.ChannelActivity_MembersInjector;
import com.dl7.mvp.module.news.channel.IChannelPresenter;
import com.dl7.mvp.rxbus.RxBus;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerManageComponent implements ManageComponent {
  private Provider<DaoSession> getDaoSessionProvider;

  private Provider<RxBus> getRxBusProvider;

  private Provider<IChannelPresenter> provideManagePresenterProvider;

  private Provider<BaseQuickAdapter> provideManageAdapterProvider;

  private MembersInjector<ChannelActivity> channelActivityMembersInjector;

  private DaggerManageComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.getDaoSessionProvider =
        new Factory<DaoSession>() {
          private final ApplicationComponent applicationComponent = builder.applicationComponent;

          @Override
          public DaoSession get() {
            return Preconditions.checkNotNull(
                applicationComponent.getDaoSession(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.getRxBusProvider =
        new Factory<RxBus>() {
          private final ApplicationComponent applicationComponent = builder.applicationComponent;

          @Override
          public RxBus get() {
            return Preconditions.checkNotNull(
                applicationComponent.getRxBus(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.provideManagePresenterProvider =
        DoubleCheck.provider(
            ChannelModule_ProvideManagePresenterFactory.create(
                builder.channelModule, getDaoSessionProvider, getRxBusProvider));

    this.provideManageAdapterProvider =
        ChannelModule_ProvideManageAdapterFactory.create(builder.channelModule);

    this.channelActivityMembersInjector =
        ChannelActivity_MembersInjector.create(
            provideManagePresenterProvider, provideManageAdapterProvider);
  }

  @Override
  public void inject(ChannelActivity activity) {
    channelActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private ChannelModule channelModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public ManageComponent build() {
      if (channelModule == null) {
        throw new IllegalStateException(ChannelModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerManageComponent(this);
    }

    public Builder channelModule(ChannelModule channelModule) {
      this.channelModule = Preconditions.checkNotNull(channelModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
