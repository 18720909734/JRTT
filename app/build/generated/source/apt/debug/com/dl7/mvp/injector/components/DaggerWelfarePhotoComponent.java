// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.injector.components;

import com.dl7.mvp.injector.modules.WelfarePhotoModule;
import com.dl7.mvp.injector.modules.WelfarePhotoModule_ProvideAdapterFactory;
import com.dl7.mvp.injector.modules.WelfarePhotoModule_ProvidePresenterFactory;
import com.dl7.mvp.module.base.IBasePresenter;
import com.dl7.mvp.module.photo.welfare.WelfareListFragment;
import com.dl7.mvp.module.photo.welfare.WelfareListFragment_MembersInjector;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerWelfarePhotoComponent implements WelfarePhotoComponent {
  private Provider<IBasePresenter> providePresenterProvider;

  private Provider<BaseQuickAdapter> provideAdapterProvider;

  private MembersInjector<WelfareListFragment> welfareListFragmentMembersInjector;

  private DaggerWelfarePhotoComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.providePresenterProvider =
        DoubleCheck.provider(
            WelfarePhotoModule_ProvidePresenterFactory.create(builder.welfarePhotoModule));

    this.provideAdapterProvider =
        DoubleCheck.provider(
            WelfarePhotoModule_ProvideAdapterFactory.create(builder.welfarePhotoModule));

    this.welfareListFragmentMembersInjector =
        WelfareListFragment_MembersInjector.create(
            providePresenterProvider, provideAdapterProvider);
  }

  @Override
  public void inject(WelfareListFragment fragment) {
    welfareListFragmentMembersInjector.injectMembers(fragment);
  }

  public static final class Builder {
    private WelfarePhotoModule welfarePhotoModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public WelfarePhotoComponent build() {
      if (welfarePhotoModule == null) {
        throw new IllegalStateException(
            WelfarePhotoModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerWelfarePhotoComponent(this);
    }

    public Builder welfarePhotoModule(WelfarePhotoModule welfarePhotoModule) {
      this.welfarePhotoModule = Preconditions.checkNotNull(welfarePhotoModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
