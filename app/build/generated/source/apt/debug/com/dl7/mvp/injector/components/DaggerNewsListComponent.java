// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.injector.components;

import com.dl7.mvp.injector.modules.NewsListModule;
import com.dl7.mvp.injector.modules.NewsListModule_ProvideAdapterFactory;
import com.dl7.mvp.injector.modules.NewsListModule_ProvidePresenterFactory;
import com.dl7.mvp.module.base.IBasePresenter;
import com.dl7.mvp.module.news.newslist.NewsListFragment;
import com.dl7.mvp.module.news.newslist.NewsListFragment_MembersInjector;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerNewsListComponent implements NewsListComponent {
  private Provider<IBasePresenter> providePresenterProvider;

  private Provider<BaseQuickAdapter> provideAdapterProvider;

  private MembersInjector<NewsListFragment> newsListFragmentMembersInjector;

  private DaggerNewsListComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.providePresenterProvider =
        DoubleCheck.provider(NewsListModule_ProvidePresenterFactory.create(builder.newsListModule));

    this.provideAdapterProvider =
        DoubleCheck.provider(NewsListModule_ProvideAdapterFactory.create(builder.newsListModule));

    this.newsListFragmentMembersInjector =
        NewsListFragment_MembersInjector.create(providePresenterProvider, provideAdapterProvider);
  }

  @Override
  public void inject(NewsListFragment fragment) {
    newsListFragmentMembersInjector.injectMembers(fragment);
  }

  public static final class Builder {
    private NewsListModule newsListModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public NewsListComponent build() {
      if (newsListModule == null) {
        throw new IllegalStateException(NewsListModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerNewsListComponent(this);
    }

    public Builder newsListModule(NewsListModule newsListModule) {
      this.newsListModule = Preconditions.checkNotNull(newsListModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
