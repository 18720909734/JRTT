// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.module.manage.love.video;

import com.dl7.mvp.module.base.ILocalPresenter;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class LoveVideoFragment_MembersInjector implements MembersInjector<LoveVideoFragment> {
  private final Provider<ILocalPresenter> mPresenterProvider;

  private final Provider<BaseQuickAdapter> mAdapterProvider;

  public LoveVideoFragment_MembersInjector(
      Provider<ILocalPresenter> mPresenterProvider, Provider<BaseQuickAdapter> mAdapterProvider) {
    assert mPresenterProvider != null;
    this.mPresenterProvider = mPresenterProvider;
    assert mAdapterProvider != null;
    this.mAdapterProvider = mAdapterProvider;
  }

  public static MembersInjector<LoveVideoFragment> create(
      Provider<ILocalPresenter> mPresenterProvider, Provider<BaseQuickAdapter> mAdapterProvider) {
    return new LoveVideoFragment_MembersInjector(mPresenterProvider, mAdapterProvider);
  }

  @Override
  public void injectMembers(LoveVideoFragment instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    com.dl7.mvp.module.base.BaseFragment_MembersInjector.injectMPresenter(
        instance, mPresenterProvider);
    instance.mAdapter = mAdapterProvider.get();
  }

  public static void injectMAdapter(
      LoveVideoFragment instance, Provider<BaseQuickAdapter> mAdapterProvider) {
    instance.mAdapter = mAdapterProvider.get();
  }
}
