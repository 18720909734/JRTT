// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.injector.components;

import com.dl7.mvp.injector.modules.PhotoSetModule;
import com.dl7.mvp.injector.modules.PhotoSetModule_ProvidePhotoSetPresenterFactory;
import com.dl7.mvp.module.base.IBasePresenter;
import com.dl7.mvp.module.news.photoset.PhotoSetActivity;
import com.dl7.mvp.module.news.photoset.PhotoSetActivity_MembersInjector;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerPhotoSetComponent implements PhotoSetComponent {
  private Provider<IBasePresenter> providePhotoSetPresenterProvider;

  private MembersInjector<PhotoSetActivity> photoSetActivityMembersInjector;

  private DaggerPhotoSetComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.providePhotoSetPresenterProvider =
        DoubleCheck.provider(
            PhotoSetModule_ProvidePhotoSetPresenterFactory.create(builder.photoSetModule));

    this.photoSetActivityMembersInjector =
        PhotoSetActivity_MembersInjector.create(providePhotoSetPresenterProvider);
  }

  @Override
  public void inject(PhotoSetActivity activity) {
    photoSetActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private PhotoSetModule photoSetModule;

    private Builder() {}

    public PhotoSetComponent build() {
      if (photoSetModule == null) {
        throw new IllegalStateException(PhotoSetModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerPhotoSetComponent(this);
    }

    public Builder photoSetModule(PhotoSetModule photoSetModule) {
      this.photoSetModule = Preconditions.checkNotNull(photoSetModule);
      return this;
    }
  }
}
