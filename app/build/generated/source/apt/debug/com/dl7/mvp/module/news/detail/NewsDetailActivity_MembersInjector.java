// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.module.news.detail;

import com.dl7.mvp.module.base.IBasePresenter;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class NewsDetailActivity_MembersInjector
    implements MembersInjector<NewsDetailActivity> {
  private final Provider<IBasePresenter> mPresenterProvider;

  private final Provider<BaseQuickAdapter> mRelatedAdapterProvider;

  public NewsDetailActivity_MembersInjector(
      Provider<IBasePresenter> mPresenterProvider,
      Provider<BaseQuickAdapter> mRelatedAdapterProvider) {
    assert mPresenterProvider != null;
    this.mPresenterProvider = mPresenterProvider;
    assert mRelatedAdapterProvider != null;
    this.mRelatedAdapterProvider = mRelatedAdapterProvider;
  }

  public static MembersInjector<NewsDetailActivity> create(
      Provider<IBasePresenter> mPresenterProvider,
      Provider<BaseQuickAdapter> mRelatedAdapterProvider) {
    return new NewsDetailActivity_MembersInjector(mPresenterProvider, mRelatedAdapterProvider);
  }

  @Override
  public void injectMembers(NewsDetailActivity instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    com.dl7.mvp.module.base.BaseActivity_MembersInjector.injectMPresenter(
        instance, mPresenterProvider);
    instance.mRelatedAdapter = mRelatedAdapterProvider.get();
  }

  public static void injectMRelatedAdapter(
      NewsDetailActivity instance, Provider<BaseQuickAdapter> mRelatedAdapterProvider) {
    instance.mRelatedAdapter = mRelatedAdapterProvider.get();
  }
}
