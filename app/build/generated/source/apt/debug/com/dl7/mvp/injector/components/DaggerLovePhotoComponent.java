// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.injector.components;

import com.dl7.mvp.injector.modules.LovePhotoModule;
import com.dl7.mvp.injector.modules.LovePhotoModule_ProvideAdapterFactory;
import com.dl7.mvp.injector.modules.LovePhotoModule_ProvidePresenterFactory;
import com.dl7.mvp.local.table.DaoSession;
import com.dl7.mvp.module.base.ILocalPresenter;
import com.dl7.mvp.module.manage.love.photo.LovePhotoFragment;
import com.dl7.mvp.module.manage.love.photo.LovePhotoFragment_MembersInjector;
import com.dl7.mvp.rxbus.RxBus;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerLovePhotoComponent implements LovePhotoComponent {
  private Provider<DaoSession> getDaoSessionProvider;

  private Provider<RxBus> getRxBusProvider;

  private Provider<ILocalPresenter> providePresenterProvider;

  private Provider<BaseQuickAdapter> provideAdapterProvider;

  private MembersInjector<LovePhotoFragment> lovePhotoFragmentMembersInjector;

  private DaggerLovePhotoComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.getDaoSessionProvider =
        new Factory<DaoSession>() {
          private final ApplicationComponent applicationComponent = builder.applicationComponent;

          @Override
          public DaoSession get() {
            return Preconditions.checkNotNull(
                applicationComponent.getDaoSession(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.getRxBusProvider =
        new Factory<RxBus>() {
          private final ApplicationComponent applicationComponent = builder.applicationComponent;

          @Override
          public RxBus get() {
            return Preconditions.checkNotNull(
                applicationComponent.getRxBus(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.providePresenterProvider =
        DoubleCheck.provider(
            LovePhotoModule_ProvidePresenterFactory.create(
                builder.lovePhotoModule, getDaoSessionProvider, getRxBusProvider));

    this.provideAdapterProvider =
        DoubleCheck.provider(LovePhotoModule_ProvideAdapterFactory.create(builder.lovePhotoModule));

    this.lovePhotoFragmentMembersInjector =
        LovePhotoFragment_MembersInjector.create(providePresenterProvider, provideAdapterProvider);
  }

  @Override
  public void inject(LovePhotoFragment fragment) {
    lovePhotoFragmentMembersInjector.injectMembers(fragment);
  }

  public static final class Builder {
    private LovePhotoModule lovePhotoModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public LovePhotoComponent build() {
      if (lovePhotoModule == null) {
        throw new IllegalStateException(LovePhotoModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerLovePhotoComponent(this);
    }

    public Builder lovePhotoModule(LovePhotoModule lovePhotoModule) {
      this.lovePhotoModule = Preconditions.checkNotNull(lovePhotoModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
