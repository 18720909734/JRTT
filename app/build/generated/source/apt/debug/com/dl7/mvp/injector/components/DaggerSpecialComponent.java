// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.injector.components;

import com.dl7.mvp.injector.modules.SpecialModule;
import com.dl7.mvp.injector.modules.SpecialModule_ProvideSpecialAdapterFactory;
import com.dl7.mvp.injector.modules.SpecialModule_ProvideSpecialPresentFactory;
import com.dl7.mvp.module.base.IBasePresenter;
import com.dl7.mvp.module.news.special.SpecialActivity;
import com.dl7.mvp.module.news.special.SpecialActivity_MembersInjector;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerSpecialComponent implements SpecialComponent {
  private Provider<IBasePresenter> provideSpecialPresentProvider;

  private Provider<BaseQuickAdapter> provideSpecialAdapterProvider;

  private MembersInjector<SpecialActivity> specialActivityMembersInjector;

  private DaggerSpecialComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideSpecialPresentProvider =
        DoubleCheck.provider(
            SpecialModule_ProvideSpecialPresentFactory.create(builder.specialModule));

    this.provideSpecialAdapterProvider =
        DoubleCheck.provider(
            SpecialModule_ProvideSpecialAdapterFactory.create(builder.specialModule));

    this.specialActivityMembersInjector =
        SpecialActivity_MembersInjector.create(
            provideSpecialPresentProvider, provideSpecialAdapterProvider);
  }

  @Override
  public void inject(SpecialActivity activity) {
    specialActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private SpecialModule specialModule;

    private Builder() {}

    public SpecialComponent build() {
      if (specialModule == null) {
        throw new IllegalStateException(SpecialModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerSpecialComponent(this);
    }

    public Builder specialModule(SpecialModule specialModule) {
      this.specialModule = Preconditions.checkNotNull(specialModule);
      return this;
    }
  }
}
