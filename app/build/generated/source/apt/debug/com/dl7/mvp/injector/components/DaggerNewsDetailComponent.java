// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.injector.components;

import com.dl7.mvp.injector.modules.NewsDetailModule;
import com.dl7.mvp.injector.modules.NewsDetailModule_ProvidePresenterFactory;
import com.dl7.mvp.injector.modules.NewsDetailModule_ProvideRelatedAdapterFactory;
import com.dl7.mvp.module.base.IBasePresenter;
import com.dl7.mvp.module.news.detail.NewsDetailActivity;
import com.dl7.mvp.module.news.detail.NewsDetailActivity_MembersInjector;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerNewsDetailComponent implements NewsDetailComponent {
  private Provider<IBasePresenter> providePresenterProvider;

  private Provider<BaseQuickAdapter> provideRelatedAdapterProvider;

  private MembersInjector<NewsDetailActivity> newsDetailActivityMembersInjector;

  private DaggerNewsDetailComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.providePresenterProvider =
        DoubleCheck.provider(
            NewsDetailModule_ProvidePresenterFactory.create(builder.newsDetailModule));

    this.provideRelatedAdapterProvider =
        DoubleCheck.provider(
            NewsDetailModule_ProvideRelatedAdapterFactory.create(builder.newsDetailModule));

    this.newsDetailActivityMembersInjector =
        NewsDetailActivity_MembersInjector.create(
            providePresenterProvider, provideRelatedAdapterProvider);
  }

  @Override
  public void inject(NewsDetailActivity activity) {
    newsDetailActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private NewsDetailModule newsDetailModule;

    private Builder() {}

    public NewsDetailComponent build() {
      if (newsDetailModule == null) {
        throw new IllegalStateException(NewsDetailModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerNewsDetailComponent(this);
    }

    public Builder newsDetailModule(NewsDetailModule newsDetailModule) {
      this.newsDetailModule = Preconditions.checkNotNull(newsDetailModule);
      return this;
    }
  }
}
