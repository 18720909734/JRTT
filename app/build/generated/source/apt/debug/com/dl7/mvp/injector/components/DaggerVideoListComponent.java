// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.injector.components;

import com.dl7.mvp.injector.modules.VideoListModule;
import com.dl7.mvp.injector.modules.VideoListModule_ProvideAdapterFactory;
import com.dl7.mvp.injector.modules.VideoListModule_ProvidePresenterFactory;
import com.dl7.mvp.module.base.IBasePresenter;
import com.dl7.mvp.module.video.list.VideoListFragment;
import com.dl7.mvp.module.video.list.VideoListFragment_MembersInjector;
import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerVideoListComponent implements VideoListComponent {
  private Provider<IBasePresenter> providePresenterProvider;

  private Provider<BaseQuickAdapter> provideAdapterProvider;

  private MembersInjector<VideoListFragment> videoListFragmentMembersInjector;

  private DaggerVideoListComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.providePresenterProvider =
        DoubleCheck.provider(
            VideoListModule_ProvidePresenterFactory.create(builder.videoListModule));

    this.provideAdapterProvider =
        DoubleCheck.provider(VideoListModule_ProvideAdapterFactory.create(builder.videoListModule));

    this.videoListFragmentMembersInjector =
        VideoListFragment_MembersInjector.create(providePresenterProvider, provideAdapterProvider);
  }

  @Override
  public void inject(VideoListFragment fragment) {
    videoListFragmentMembersInjector.injectMembers(fragment);
  }

  public static final class Builder {
    private VideoListModule videoListModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public VideoListComponent build() {
      if (videoListModule == null) {
        throw new IllegalStateException(VideoListModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerVideoListComponent(this);
    }

    public Builder videoListModule(VideoListModule videoListModule) {
      this.videoListModule = Preconditions.checkNotNull(videoListModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
