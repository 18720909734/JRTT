// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.module.news.channel;

import com.dl7.recycler.adapter.BaseQuickAdapter;
import dagger.MembersInjector;
import javax.inject.Provider;

public final class ChannelActivity_MembersInjector implements MembersInjector<ChannelActivity> {
  private final Provider<IChannelPresenter> mPresenterProvider;

  private final Provider<BaseQuickAdapter> mCheckedAdapterAndMUncheckedAdapterProvider;

  public ChannelActivity_MembersInjector(
      Provider<IChannelPresenter> mPresenterProvider,
      Provider<BaseQuickAdapter> mCheckedAdapterAndMUncheckedAdapterProvider) {
    assert mPresenterProvider != null;
    this.mPresenterProvider = mPresenterProvider;
    assert mCheckedAdapterAndMUncheckedAdapterProvider != null;
    this.mCheckedAdapterAndMUncheckedAdapterProvider = mCheckedAdapterAndMUncheckedAdapterProvider;
  }

  public static MembersInjector<ChannelActivity> create(
      Provider<IChannelPresenter> mPresenterProvider,
      Provider<BaseQuickAdapter> mCheckedAdapterAndMUncheckedAdapterProvider) {
    return new ChannelActivity_MembersInjector(
        mPresenterProvider, mCheckedAdapterAndMUncheckedAdapterProvider);
  }

  @Override
  public void injectMembers(ChannelActivity instance) {
    if (instance == null) {
      throw new NullPointerException("Cannot inject members into a null reference");
    }
    com.dl7.mvp.module.base.BaseActivity_MembersInjector.injectMPresenter(
        instance, mPresenterProvider);
    instance.mCheckedAdapter = mCheckedAdapterAndMUncheckedAdapterProvider.get();
    instance.mUncheckedAdapter = mCheckedAdapterAndMUncheckedAdapterProvider.get();
  }

  public static void injectMCheckedAdapter(
      ChannelActivity instance, Provider<BaseQuickAdapter> mCheckedAdapterProvider) {
    instance.mCheckedAdapter = mCheckedAdapterProvider.get();
  }

  public static void injectMUncheckedAdapter(
      ChannelActivity instance, Provider<BaseQuickAdapter> mUncheckedAdapterProvider) {
    instance.mUncheckedAdapter = mUncheckedAdapterProvider.get();
  }
}
