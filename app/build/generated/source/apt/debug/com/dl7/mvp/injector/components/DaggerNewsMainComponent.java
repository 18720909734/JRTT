// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.dl7.mvp.injector.components;

import com.dl7.mvp.adapter.ViewPagerAdapter;
import com.dl7.mvp.injector.modules.NewsMainModule;
import com.dl7.mvp.injector.modules.NewsMainModule_ProvideMainPresenterFactory;
import com.dl7.mvp.injector.modules.NewsMainModule_ProvideViewPagerAdapterFactory;
import com.dl7.mvp.local.table.DaoSession;
import com.dl7.mvp.module.base.IRxBusPresenter;
import com.dl7.mvp.module.news.main.NewsMainFragment;
import com.dl7.mvp.module.news.main.NewsMainFragment_MembersInjector;
import com.dl7.mvp.rxbus.RxBus;
import dagger.MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerNewsMainComponent implements NewsMainComponent {
  private Provider<DaoSession> getDaoSessionProvider;

  private Provider<RxBus> getRxBusProvider;

  private Provider<IRxBusPresenter> provideMainPresenterProvider;

  private Provider<ViewPagerAdapter> provideViewPagerAdapterProvider;

  private MembersInjector<NewsMainFragment> newsMainFragmentMembersInjector;

  private DaggerNewsMainComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.getDaoSessionProvider =
        new Factory<DaoSession>() {
          private final ApplicationComponent applicationComponent = builder.applicationComponent;

          @Override
          public DaoSession get() {
            return Preconditions.checkNotNull(
                applicationComponent.getDaoSession(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.getRxBusProvider =
        new Factory<RxBus>() {
          private final ApplicationComponent applicationComponent = builder.applicationComponent;

          @Override
          public RxBus get() {
            return Preconditions.checkNotNull(
                applicationComponent.getRxBus(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.provideMainPresenterProvider =
        DoubleCheck.provider(
            NewsMainModule_ProvideMainPresenterFactory.create(
                builder.newsMainModule, getDaoSessionProvider, getRxBusProvider));

    this.provideViewPagerAdapterProvider =
        DoubleCheck.provider(
            NewsMainModule_ProvideViewPagerAdapterFactory.create(builder.newsMainModule));

    this.newsMainFragmentMembersInjector =
        NewsMainFragment_MembersInjector.create(
            provideMainPresenterProvider, provideViewPagerAdapterProvider);
  }

  @Override
  public void inject(NewsMainFragment fragment) {
    newsMainFragmentMembersInjector.injectMembers(fragment);
  }

  public static final class Builder {
    private NewsMainModule newsMainModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public NewsMainComponent build() {
      if (newsMainModule == null) {
        throw new IllegalStateException(NewsMainModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerNewsMainComponent(this);
    }

    public Builder newsMainModule(NewsMainModule newsMainModule) {
      this.newsMainModule = Preconditions.checkNotNull(newsMainModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
